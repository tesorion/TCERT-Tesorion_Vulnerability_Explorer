from sqlite3 import connect
from sqlite3 import version
from sqlite3 import Error
from tkinter import Tk, Toplevel, Text, StringVar
from tkinter import N, E, S, W, NORMAL, DISABLED, INSERT, END, WORD
from tkinter.ttk import Treeview, Style, Label, Button, Scrollbar, Entry, Frame, OptionMenu
from requests import get
from datetime import datetime, timedelta
from gzip import decompress
from json import loads
from csv import DictReader
from openpyxl import Workbook
from openpyxl.styles import Alignment
from openpyxl.worksheet.table import Table, TableStyleInfo
from webbrowser import open_new
from re import sub
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from mplcursors import cursor

### Initialize
## Define constants
BGC       = "#282828"
BGC_FIELD = "#444444"
FGC       = "#cccccc"

## Initialize variables
dark_mode       = False
sql_order_by    = "cve.id"
sql_direction   = "ASC"
sql_cve_filter  = None

### Functions
## Open SQlite DB
def open_db(db_file):
    conn = None

    sql_nvd_table = """ CREATE TABLE IF NOT EXISTS nvd (
                            id text PRIMARY KEY,
                            published_date text,
                            sha256 text
                        ); """
    
    sql_cve_table = """ CREATE TABLE IF NOT EXISTS cve (
                            id text PRIMARY KEY,
                            published_date text,
                            last_modified_date text,
                            description text,
                            reference_urls text,
                            vectorString text,
                            baseScore float,
                            cvssVersion text,
                            cwe text
                        ); """
    
    sql_epss_table = """ CREATE TABLE IF NOT EXISTS epss (
                            id text PRIMARY KEY,
                            published_date text,
                            epss_score float,
                            epss_percentile float
                        ); """

    sql_cisa_table = """ CREATE TABLE IF NOT EXISTS cisa (
                            id text PRIMARY KEY,
                            published_date text,
                            due_date text
                        ); """

    try:
        conn = connect(db_file)
        cursor = conn.cursor()
        cursor.execute(sql_nvd_table)
        cursor.execute(sql_cve_table)
        cursor.execute(sql_epss_table)
        cursor.execute(sql_cisa_table)
        conn.commit()
        write_console("Opened DB connection. DB version: {}".format(version))
    except Error as e:
        write_console(e)

    return conn

## Download CVE & CVSS data from NVD and update local DB
def update_cvss():
    write_console("Update CVE & CVSS information")
    start_busy()

    # Variable init
    start_year = int(cvss_date_selected.get())
    end_year   = int(datetime.now().year)
    cursor      = conn.cursor()
    
    # Remove entries older than the current "start_year"
    for key in range(1999, start_year):
        # Do not remove any data if "2002" is selected, as data of 1999-2002 is all stored in one file.
        if start_year == 2002:
            break
        
        # Check whether data is available for the given year
        sql = "SELECT * FROM cve WHERE id LIKE \"CVE-{0}-%\"".format(key)
        try:
            cursor.execute(sql)
            rows = cursor.fetchall()
        except Error as e:
            write_console(e)
            conn.commit()
            continue

        # Remove the data
        if len(rows) == 0:
            continue

        sql1 = "DELETE FROM cve WHERE id LIKE \"CVE-{0}-%\"".format(key)
        sql2 = "DELETE FROM nvd WHERE id=\"{0}\"".format(key)
        
        try:
            cursor.execute(sql1)
            cursor.execute(sql2)
        except Error as e:
            write_console(e)
            conn.commit()
            continue

        # Final
        conn.commit()
        write_console("NVD dataset {} removed.".format(key))

    # Download/Update data since "start_year"
    for key in range(start_year, end_year+1):
        # Variable init
        url_cve     = "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-{}.json.gz".format(key)
        url_meta    = "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-{}.meta".format(key)
        meta = {}

        # Download NVD Metadata file
        response = get(url_meta).content.decode()
        for line in response.splitlines():
            tmp = line.split(":",1)
            if len(tmp)==2:
                meta[tmp[0]] = tmp[1]

        # Check if NVD has an update            
        sql = "SELECT * FROM nvd WHERE id=\"{}\" AND sha256=\"{}\"".format(key,meta["sha256"])
        try:
            cursor.execute(sql)
            rows = cursor.fetchall()
        except Error as e:
            write_console(e)
            conn.commit()
            continue

        # Apply the update, or skip to the next year
        if len(rows) > 0:
            write_console("NVD dataset {} already up-to-date, date last modified: {}".format(key,meta["lastModifiedDate"]))
            continue

        # Download and ingest the NVD CVE/CVSS information
        response = get(url_cve)
        response = decompress(response.content)
        response = loads(response)
        cve_items = response["CVE_Items"]

        for cve_item in cve_items:
            cve_id              = cve_item["cve"]["CVE_data_meta"]["ID"]
            published_date      = cve_item["publishedDate"]
            last_modified_date  = cve_item["lastModifiedDate"]
            description         = cve_item["cve"]["description"]["description_data"][0]["value"].replace("\"", "'")
            
                        
            if cve_item["impact"] and "baseMetricV3" in cve_item["impact"].keys():
                vector_string       = cve_item["impact"]["baseMetricV3"]["cvssV3"]["vectorString"]
                base_score          = str(cve_item["impact"]["baseMetricV3"]["cvssV3"]["baseScore"])
                cvss_version        = "V3"
            elif cve_item["impact"] and "baseMetricV2" in cve_item["impact"].keys():
                vector_string       = cve_item["impact"]["baseMetricV2"]["cvssV2"]["vectorString"]
                base_score          = str(cve_item["impact"]["baseMetricV2"]["cvssV2"]["baseScore"])
                cvss_version        = "V2"
            else:
                vector_string = None
                base_score    = None
                cvss_version  = None

            if cve_item["cve"]["problemtype"]["problemtype_data"] and cve_item["cve"]["problemtype"]["problemtype_data"][0]["description"]:
                cwe = cve_item["cve"]["problemtype"]["problemtype_data"][0]["description"][0]["value"]
                
            reference_urls = []
            for reference in cve_item["cve"]["references"]["reference_data"]:
                reference_urls.append(reference["url"])
            reference_urls = "\n".join(reference_urls)
            
            sql = "INSERT INTO cve VALUES (\"{0}\", \"{1}\", \"{2}\", \"{3}\", \"{4}\", \"{5}\", \"{6}\", \"{7}\", \"{8}\") ON CONFLICT (id) DO UPDATE SET last_modified_date=\"{2}\", description=\"{3}\", reference_urls=\"{4}\", vectorString=\"{5}\", baseScore=\"{6}\", cvssVersion=\"{7}\", cwe=\"{8}\"".format(cve_id, published_date, last_modified_date, description, reference_urls, vector_string, base_score, cvss_version, cwe)
                                    
            try:
                cursor.execute(sql)
            except Error as e:
                write_console(e)
                conn.commit()
                continue

        # Update the metadata information
        sql = "INSERT INTO nvd VALUES (\"{0}\", \"{1}\", \"{2}\") ON CONFLICT (id) DO UPDATE SET sha256=\"{2}\"".format(key,meta["lastModifiedDate"],meta["sha256"])
        try:
            cursor.execute(sql)
        except Error as e:
            write_console(e)
            conn.commit()
            continue

        # Final
        conn.commit()
        write_console("NVD dataset {} updated successful".format(key))
    
    # Final
    conn.execute("VACUUM")
    write_console("Update CVE & CVSS information - DONE")
    stop_busy()
    query_data()

## Get the current CVSS/CVE since date from the database
def get_current_cvss_since_date():
    sql = "SELECT MIN(id) FROM nvd"
    cursor      = conn.cursor()
    try:
        cursor.execute(sql)
        result = cursor.fetchall()[0][0]
    except Error as e:
        write_console(e)
        conn.commit()

    if result:
        return result
    else:
        return datetime.now().year-10 # Current year - 10

## Download EPSS info from FIRST and update local DB
def update_epss():
    # Variable init
    epss_date = sub(r"[^0-9\-]", "", epss_date_box.get())       # Remove "illegal" characters from date-input
    write_console("Update EPSS information for date: {}".format(epss_date))
    start_busy()
    
    # Download the EPSS data
    url        = "https://epss.cyentia.com/epss_scores-{}.csv.gz".format(epss_date)
    response   = get(url)
    if response.status_code != 200:
        write_console("ERROR - Something went wrong during the download of the EPSS data. No data available for the given EPSS Date. Please check the EPSS Date!")
        return

    response   = decompress(response.content).decode().splitlines()
    response.pop(0)
    epss_items = DictReader(response)
    
    total     = len(response)-1
    write_console("Number of EPSS entries to update: {}".format(total))
    cursor = conn.cursor()

    # Remove all current EPSS data from the database
    sql = "DELETE FROM epss"
    try:
        cursor.execute(sql)
    except Error as e:
        write_console(e)
        return
    finally:
        conn.commit()

    # Ingest the new EPSS data into the database
    for epss_item in epss_items:
        cve_id          = epss_item["cve"]
        epss            = epss_item["epss"]
        percentile      = epss_item["percentile"]
        published_date  = epss_date
        sql = "INSERT INTO epss VALUES (\"{0}\", \"{1}\", \"{2}\", \"{3}\") ".format(cve_id, published_date, epss, percentile)

        try:
            cursor.execute(sql)
        except Error as e:
            write_console(e)
            conn.commit()
            continue

    # Final
    conn.commit()
    write_console("Update EPSS information - DONE")
    stop_busy()
    query_data()

## Download info from CISA KEV catalog and update local DB
def update_cisa():
    write_console("Update the CISA KEV catalog")
    start_busy()
    
    # Download the CISA KEV data
    url = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"
    response = get(url)
    response = loads(response.content)
    vulnerabilities = response["vulnerabilities"]

    cursor = conn.cursor()

    # Remove all current KEV data from the database
    sql = "DELETE FROM cisa"
    try:
        cursor.execute(sql)
    except Error as e:
        write_console(e)
        return
    finally:
        conn.commit()
    
    # Ingest the new KEV data into the database
    for vulnerability in vulnerabilities:
        cve_id         = vulnerability["cveID"]
        published_date = vulnerability["dateAdded"]
        due_date       = vulnerability["dueDate"]
        sql = "INSERT INTO cisa VALUES (\"{0}\", \"{1}\", \"{2}\")".format(cve_id, published_date, due_date)
        
        try:
            cursor.execute(sql)
        except Error as e:
            write_console(e)
            conn.commit()
            continue

    # Final
    conn.commit()
    write_console("Update the CISA KEV catalog - DONE")
    stop_busy()
    query_data()

## Download info for all three sources
def update_all():
    update_cvss()
    update_epss()
    update_cisa()
    
## Apply CPE filter
def cpe_search():
    # Variable init
    global sql_cve_filter
    match_string = sub(r"[^A-Za-z0-9:._\*]", "", cpe_search_box.get()) # Remove "illegal" characters
    
    write_console("Filter on CPE information: {}".format(match_string))

    # Download CVE matches
    url = "https://services.nvd.nist.gov/rest/json/cpes/1.0?resultsPerPage=2000&addOns=cves&cpeMatchString={}".format(match_string)
    response = get(url)

    if response.status_code == 403:
        write_console("ERROR - You likely hit the NIST CPE request limit of 10 requests per 60 seconds. Please try again.")
        return
    elif response.status_code != 200:
        write_console("ERROR - Something went wrong during the collection of CPE information. You may try again. HTTP code: {}". format(response.status_code))
        return
    
    response = loads(response.content)
    
    if "message" in response:
        write_console("ERROR - Error from NVD CPE API: {}".format(response["message"]))
        return

    write_console("Number of CPE matches: {}".format(response["totalResults"]))
    if response["totalResults"] > 2000:
        write_console("WARNING - Only the first 2000 CPE matches will be processed. Make the CPE filter more specific.")

    # Apply a filter, based on the CVE matches
    cpes          = response["result"]["cpes"]
    cves          = []
    
    for cpe in cpes:
        vulnerabilities = cpe["vulnerabilities"]
        for vulnerability in vulnerabilities:
            cves.append(vulnerability)

    cves   = list(dict.fromkeys(cves))
        
    write_console("Number of CVE matches: {}".format(len(cves)))
    write_console("Filter on CPE information - DONE")
    sql_cve_filter = "\""+"\",\"".join(cves)+"\""
    query_data()

## Clear CPE filter
def cpe_clear():
    global sql_cve_filter
    sql_cve_filter = None

    cpe_search_box.delete("0", END)
    cpe_search_box.insert("1", "cpe:2.3:")
    
    query_data()

## Apply CVE filter
def cve_search():
    # Variable init
    global sql_cve_filter
    cves = sub(r"[^CVEcve\-0-9,]", "", cve_search_box.get()) # Remove "illegal" characters
    cves = cves.upper()
    cves = cves.split(",")
    
    # Apply the CVE filter
    sql_cve_filter = "\""+"\",\"".join(cves)+"\""
    write_console("Filter on CVE(s): {}".format(sql_cve_filter))
    
    query_data()

## Clear CVE filter
def cve_clear():
    global sql_cve_filter
    sql_cve_filter = None

    cve_search_box.delete("0", END)
        
    query_data()

## Open the NIST NVD website for CPE searches
def cpe_search_help(event):
    open_new("https://nvd.nist.gov/products/cpe/search")

## Populate the table view of the GUI, with the optional CVE filter applied
def query_data():
    write_console("Load data from DB")
    start_busy()
    
    # Query the database
    cursor = conn.cursor()
    if sql_cve_filter:
        sql = "SELECT cve.id,cve.published_date,cve.last_modified_date,cve.baseScore,cve.cvssVersion,epss.epss_score,epss.epss_percentile,epss.published_date,cisa.published_date,cve.description FROM cve LEFT JOIN epss ON cve.id=epss.id LEFT JOIN cisa ON cve.id=cisa.id WHERE cve.id IN ({}) ORDER BY {} {}".format(sql_cve_filter, sql_order_by, sql_direction)
    else:    
        sql = "SELECT cve.id,cve.published_date,cve.last_modified_date,cve.baseScore,cve.cvssVersion,epss.epss_score,epss.epss_percentile,epss.published_date,cisa.published_date,cve.description FROM cve LEFT JOIN epss ON cve.id=epss.id LEFT JOIN cisa ON cve.id=cisa.id ORDER BY {} {}".format(sql_order_by, sql_direction)

    try:
        cursor.execute(sql)
    except Error as e:
        write_console(e)

    # Clear the table view
    table.delete(*table.get_children())
    
    # Populate the table view
    rows = cursor.fetchall()
    for row in rows:
        table.insert('', END, values=row)

    write_console("Number of listed CVEs: {}".format(len(rows)))
    write_console("Load data from DB - DONE")
    stop_busy()

## Export the selection to an Excel file
def export_to_excel():
    write_console("Export data to Excel")
    start_busy()
    xlsx_file = ("Export.xlsx")

    # Prepare the Excel Workbook
    workbook = Workbook()
    sheet = workbook.active
    sheet.append(["CVE","CVE Published","CVE Last modified","CVSS Base score","CVSS version","CVSS Vector string","EPSS Score","EPSS Percentile","EPSS Date","CISA KEV Date","Description","References"])
    
    sheet.column_dimensions["A"].width = 17
    sheet.column_dimensions["B"].width = 19
    sheet.column_dimensions["C"].width = 19
    sheet.column_dimensions["D"].width = 8
    sheet.column_dimensions["E"].width = 8
    sheet.column_dimensions["F"].width = 35
    sheet.column_dimensions["G"].width = 10
    sheet.column_dimensions["H"].width = 10
    sheet.column_dimensions["I"].width = 12
    sheet.column_dimensions["J"].width = 12
    sheet.column_dimensions["K"].width = 100
    sheet.column_dimensions["L"].width = 100
        
    # Query the database with the optional CVE filters applied
    cursor = conn.cursor()
    if sql_cve_filter:
        sql = "SELECT cve.id,cve.published_date,cve.last_modified_date,cve.baseScore,cve.cvssVersion,cve.vectorString,epss.epss_score,epss.epss_percentile,epss.published_date,cisa.published_date,cve.description,cve.reference_urls FROM cve LEFT JOIN epss ON cve.id=epss.id LEFT JOIN cisa ON cve.id=cisa.id WHERE cve.id IN ({}) ORDER BY {} {}".format(sql_cve_filter, sql_order_by, sql_direction)
    else: 
        sql = "SELECT cve.id,cve.published_date,cve.last_modified_date,cve.baseScore,cve.cvssVersion,cve.vectorString,epss.epss_score,epss.epss_percentile,epss.published_date,cisa.published_date,cve.description,cve.reference_urls FROM cve LEFT JOIN epss ON cve.id=epss.id LEFT JOIN cisa ON cve.id=cisa.id ORDER BY {} {}".format(sql_order_by, sql_direction)
 
    try:
        cursor.execute(sql)
    except Error as e:
        write_console(e)

    # Populate the Excel Workbook
    rows = cursor.fetchall()
    for row in rows:
        sheet.append(row)
    
    tab   = Table(displayName="Table1", ref="A1:L{}".format(sheet.max_row))
    style = TableStyleInfo(name="TableStyleMedium9", showFirstColumn=False, showLastColumn=False, showRowStripes=True, showColumnStripes=False)
    tab.tableStyleInfo = style
    sheet.add_table(tab)

    align       = Alignment(vertical="top")
    align_wrap  = Alignment(vertical="top", wrap_text=True)
    
    for i in range(2,sheet.max_row+1):
        sheet["A{}".format(i)].alignment = align
        sheet["B{}".format(i)].alignment = align
        sheet["C{}".format(i)].alignment = align
        sheet["D{}".format(i)].alignment = align
        sheet["E{}".format(i)].alignment = align
        sheet["F{}".format(i)].alignment = align
        sheet["G{}".format(i)].alignment = align
        sheet["H{}".format(i)].alignment = align
        sheet["I{}".format(i)].alignment = align
        sheet["J{}".format(i)].alignment = align
        sheet["K{}".format(i)].alignment = align_wrap
        sheet["L{}".format(i)].alignment = align_wrap
    
    # Final
    workbook.save(xlsx_file)
    write_console("Export data to Excel - DONE")
    stop_busy()

## Write message to the console
def write_console(message):
    if not message=="":
        console.configure(state = NORMAL)
        console.insert(INSERT, datetime.now().strftime("%d-%m-%Y %H:%M:%S") + " - " + message.rstrip() + "\n")
        console.configure(state = DISABLED)
        console.see("end")
    window.update()
    window.update_idletasks()

## Apply sort-operation on the table view
def treeview_sort_column(tv, col, reverse):
    global sql_direction
    global sql_order_by
    
    if reverse:
        sql_direction = "ASC"
    else:
        sql_direction = "DESC"

    sql_order_by = col
    
    write_console("Sort on: {} {}".format(sql_order_by, sql_direction))
    query_data()

    tv.heading(col, command=lambda _col=col: 
               treeview_sort_column(tv, _col, not reverse))

## Open pop-up window with CVE details
def open_popup(event):
    # Determine which line was selected --> extract the CVE ID
    selection = table.selection()
    values    = table.item(selection)["values"]
    if values=='':
        # Something went wrong, return with no result
        return
    
    cve_id    = values[0]

    # Draw the popup window 
    popup = Toplevel(window, width=70)
    popup.title("CVE Details - {}".format(cve_id))
    popup.resizable(False, False) 
    if dark_mode: popup.configure(bg=BGC)

    # Fetch the CVE details from the database
    cursor = conn.cursor()
    sql = "SELECT cve.id,cve.published_date,cve.last_modified_date,cve.baseScore,cve.cvssVersion,cve.vectorString,cve.cwe,epss.epss_score,epss.epss_percentile,epss.published_date,cisa.published_date,cve.description,cve.reference_urls FROM cve LEFT JOIN epss ON cve.id=epss.id LEFT JOIN cisa ON cve.id=cisa.id WHERE cve.id=\"{}\"".format(cve_id)
    try:
        cursor.execute(sql)
    except Error as e:
        write_console(e)

    data = cursor.fetchall()[0]

    # Download EPSS trendline data from API
    epss_series = {}
    percentile_series = {}
    url        = "https://api.first.org/data/v1/epss?cve={}&scope=time-series".format(cve_id)
    response   = get(url)
    response   = loads(response.content)
    if response["data"] and "time-series" in response["data"][0]:
        time_series = response["data"][0]["time-series"]
    else:
        time_series = []
    
    for x in range(len(time_series),0,-1):
        element          = time_series[x-1]
        key              = element["date"]
        value_epss       = float(element["epss"])
        value_percentile = float(element["percentile"])
        epss_series[key]       = value_epss
        percentile_series[key] = value_percentile
        
    # Draw all elements in the pop-up window
    cpe_search_link = Label(popup, text="NVD CVE Details (open website)", foreground="#4444ff", cursor="hand2")
    cpe_search_link.grid(column=1, row=0, sticky=W)
    cpe_search_link.bind("<Button-1>", lambda event:open_new("https://nvd.nist.gov/vuln/detail/{}".format(cve_id)))

    popup_element(popup, 1, 1, "CVE ID", cve_id)
    popup_element(popup, 2, 1, "CVE Published", data[1])
    popup_element(popup, 3, 1, "CVE Last modified", data[2])
    popup_element(popup, 4, 1, "CVSS Base score", data[3])
    popup_element(popup, 5, 1, "CVSS Version", data[4])
    popup_element(popup, 6, 1, "CVSS VectorString", data[5])
    popup_element(popup, 7, 1, "CWE ID", data[6])
    popup_element(popup, 8, 1, "CWE Description", "")
    popup_element(popup, 9, 1, "EPSS Score", str(data[7]))
    popup_element(popup, 10, 1, "EPSS Percentile", str(data[8]))
    popup_element(popup, 11, 1, "EPSS Date", str(data[9]))
    popup_element(popup, 12, 1, "CISA KEV Date", str(data[10]))
    popup_element(popup, 13, 5, "CVE Description", data[11])
    popup_element(popup, 14, 5, "CVE References", data[12])

    popup_trendline(popup, 15, epss_series, "Trendline EPSS Score")
    popup_trendline(popup, 16, percentile_series, "Trendline EPSS Percentile")
    
    popup.mainloop()

## Draw a specific element of the pop-up window
def popup_element(popup, row, height, name, data):
    label = Label(popup, text=name)
    label.grid(column=0, row=row, sticky=N+W)
    box = Text(popup, height=height, wrap=WORD)
    box.insert("1.0", data)
    box.configure(state = DISABLED)
    
    if dark_mode: box.configure(bg=BGC_FIELD, fg=FGC)
    box.grid(column=1, row=row, sticky=W+E)
    if (height>1):
        box_scrlbar = Scrollbar(popup, orient ="vertical", command = box.yview)
        box_scrlbar.grid(column=2, row=row, sticky=N+E+S)
        box.configure(yscrollcommand = box_scrlbar.set)
    else:
        box.grid(columnspan=2)
        popup.update()

## Draw an EPSS trendline element of the pop-up window
def popup_trendline(popup, row, data, name):
    label = Label(popup, text=name)
    label.grid(column=0, row=row, sticky=N+W)
    
    # Plot the graph
    if dark_mode:
        bgc = BGC_FIELD
        fgc = FGC
    else:
        bgc = None
        fgc = None
        
    figure = Figure(figsize=(9, 2), dpi=75, layout='tight' , facecolor=bgc, edgecolor=fgc)
    figure_canvas = FigureCanvasTkAgg(figure, popup)
    figure_canvas.get_tk_widget().grid(columnspan=2, column=1, row=row, sticky=W, pady=2)
        
    axes = figure.add_subplot(facecolor=bgc)
    
    axes.spines[['top','right']].set_visible(False)
    
    if dark_mode:
        axes.tick_params(colors=fgc)
        axes.spines[:].set_color(fgc)
        #axes.set_xlabel('Date', color=fgc)
        #axes.set_ylabel('Score', color=fgc)
    #else:
        #axes.set_xlabel('Date')
        #axes.set_ylabel('Score')
    
    if len(data)>0:
        axes.set_xticks([0,5,10,15,20,25,29])
        axes.ticklabel_format(useOffset=False)
        axes.plot(data.keys(), data.values(), marker='.', linewidth=0.5)

    cursor(axes, hover=2)

def enable_dark_mode():
    global dark_mode
    dark_mode = True
    window.configure(bg=BGC)
    style.theme_use("default")
    style.configure('TLabel', background=BGC, foreground=FGC)
    style.configure('TButton', background=BGC_FIELD, foreground=FGC)
    style.map('TButton', background=[('active', BGC)])
    style.configure('TEntry', fieldbackground=BGC_FIELD, foreground=FGC)
    style.configure('Vertical.TScrollbar', troughcolor=BGC_FIELD, background=FGC, foreground=BGC)
    style.map('Vertical.TScrollbar', background=[('disabled', BGC)], foreground=[('disabled', FGC)])
    style.configure('Treeview', fieldbackground=BGC_FIELD, background=BGC, foreground=FGC)
    style.configure('Treeview.Heading', background=BGC_FIELD, foreground=FGC)
    style.map('Treeview.Heading', background=[('active', BGC)])
    style.configure('TFrame', background=BGC)
    console.configure(bg=BGC_FIELD, fg=FGC)
    window.update()

def enable_light_mode():
    global dark_mode
    dark_mode = False
    window.configure(bg='#f0f0f0')
    style.theme_use("vista")
    console.configure(bg='white', fg='black')
    window.update()

## Show the busy-label
def start_busy():
    busy_label.grid(column=7, row=0)
    window.update()

## Hide the busy-label
def stop_busy():
    busy_label.grid_remove()
    window.update()



### Main program
## Create the application Window
# Initialize the GUI
window = Tk()
window.title("Tesorion Vulnerability Explorer")
window.geometry('1400x750')
window.columnconfigure(0, weight=1)
window.rowconfigure(3, weight=1)
style = Style(window)
#window.iconbitmap("fav.ico")

# Draw the top frame - Search section
top_frame = Frame(window)
top_frame.grid(column=0, row=0, pady=5, sticky=W)
cpe_search_label = Label(top_frame, text="CPE filter:")
cpe_search_label.grid(column=0, row=1, sticky=W)
cpe_search_box = Entry(top_frame, width=90)
cpe_search_box.insert("1", "cpe:2.3:")
cpe_search_box.grid(column=1, row=1)
cpe_search_button = Button(top_frame, text="Filter on CPE", command=cpe_search)
cpe_search_button.grid(column=2, row=1)
cpe_search_clear_button = Button(top_frame, text="Clear CPE filter", command=cpe_clear)
cpe_search_clear_button.grid(column=3, row=1)
cpe_search_link = Label(top_frame, text="NVD CPE search (open website)", foreground="#4444ff", cursor="hand2")
cpe_search_link.grid(column=4, row=1)
cpe_search_link.bind("<Button-1>", cpe_search_help)

cve_search_label = Label(top_frame, text="CVE filter (comma separated):")
cve_search_label.grid(column=0, row=2, sticky=W)
cve_search_box = Entry(top_frame, width=90)
cve_search_box.grid(column=1, row=2)
cve_search_button = Button(top_frame, text="Filter on CVE", command=cve_search)
cve_search_button.grid(column=2, row=2)
cve_search_clear_button = Button(top_frame, text="Clear CVE filter", command=cve_clear)
cve_search_clear_button.grid(column=3, row=2)

# Draw the middle frame - Table view
columns = ("cve.id","cve.published_date","cve.last_modified_date","cve.baseScore","cve.cvssVersion","epss.epss_score","epss.epss_percentile","epss.published_date","cisa.published_date","cve.description")
table = Treeview(window, columns=columns, show='headings', selectmode='browse')
table.grid(column=0, row=3, sticky=N+E+S+W)
table.bind('<Double-1>', open_popup)
table.heading('cve.id', text='CVE')
table.heading('cve.published_date', text='CVE Published')
table.heading('cve.last_modified_date', text='CVE Last modified')
table.heading('cve.baseScore', text='CVSS Base score')
table.heading('cve.cvssVersion', text='CVSS Version')
table.heading('epss.epss_score', text='EPSS Score')
table.heading('epss.epss_percentile', text='EPSS Percentile')
table.heading('epss.published_date', text='EPSS Date')
table.heading('cisa.published_date', text='CISA KEV Date')
table.heading('cve.description', text='Description')

table.column('cve.id', width=100)
table.column('cve.published_date', width=120)
table.column('cve.last_modified_date', width=120)
table.column('cve.baseScore', width=50)
table.column('cve.cvssVersion', width=50)
table.column('epss.epss_score', width=80)
table.column('epss.epss_percentile', width=80)
table.column('epss.published_date', width=80)
table.column('cisa.published_date', width=80)
table.column('cve.description', width=600)

for column in columns:
    table.heading(column, command=lambda _column=column: treeview_sort_column(table, _column, False))

verscrlbar = Scrollbar(window, orient ="vertical", command = table.yview)
verscrlbar.grid(column=1, row=3, sticky=N+E+S)
table.configure(yscrollcommand = verscrlbar.set)

# Draw the bottom frame - Control / Button section
button_frame = Frame(window)
button_frame.grid(column=0, row=4, pady=5, sticky=W)
dark_mode_button = Button(button_frame, text="Enter the \"Dark\"", command=enable_dark_mode)
dark_mode_button.grid(column=0, row=0)
light_mode_button = Button(button_frame, text="Back to the \"Light\"", command=enable_light_mode)
light_mode_button.grid(column=1, row=0)
exportexcel = Button(button_frame, text="Export to Excel", command=export_to_excel)
exportexcel.grid(column=2, row=0)
updatecvss = Button(button_frame, text="Update CVE", command=update_cvss)
updatecvss.grid(column=3, row=0)
updatecisa = Button(button_frame, text="Update CISA KEV", command=update_cisa)
updatecisa.grid(column=4, row=0)
updateepss = Button(button_frame, text="Update EPSS", command=update_epss)
updateepss.grid(column=5, row=0)
updateall = Button(button_frame, text="Update all", command=update_all)
updateall.grid(column=6, row=0)
busy_label = Label(button_frame, text="Busy")

epss_date_label = Label(button_frame, text="EPSS Date (yyyy-mm-dd):")
epss_date_label.grid(column=0, row=1, columnspan=2, sticky=W)
epss_date_box = Entry(button_frame, width = 20)
epss_date_box.insert("1", (datetime.now()-timedelta(1)).strftime("%Y-%m-%d"))
epss_date_box.grid(column=2, row=1, columnspan=2, sticky=W)
cvss_date_label = Label(button_frame, text="Download CVE data since:")
cvss_date_label.grid(column=0, row=2, columnspan=2, sticky=W)
cvss_date_selected = StringVar(button_frame)
cvss_date_optionmenu = OptionMenu(button_frame, cvss_date_selected, None, *range(2002, datetime.now().year+1), direction="right")
cvss_date_optionmenu.grid(column=2, row=2, columnspan=2, sticky=W)

console_lbl = Label(window, text="Console:")
console_lbl.grid(column=0, row=6, sticky=W)

# Draw the Console frame
console = Text(window, width=150, height=10, wrap=WORD)
console.grid(column=0, row=7, sticky=W+E)
console_scrlbar = Scrollbar(window, orient ="vertical", command = table.yview)
console_scrlbar.grid(column=1, row=7, sticky=N+E+S)
console.configure(yscrollcommand = console_scrlbar.set)

window.update()

## Open the database
conn = open_db("database.db")

## Set the CVSS/CVE since date. Last value or the default value: "current year-10".
cvss_date_selected.set(get_current_cvss_since_date())

## Load the data into the table view
query_data()

## Main loop
window.mainloop()
